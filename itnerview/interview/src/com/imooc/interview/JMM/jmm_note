- JMM
    - ★方法★里的基本数据类型本地变量将直接存储在工作内存(私有)的栈帧结构中
    - ★引用类型的本地变量★：引用存储在工作内存中，而指向的实例存储在主内存中；
    - ★成员★变量、static变量、类信息，均保存在主内存中
    - 工作原理：从主存拷贝到工作内存(私有)中，运算完毕后写入主存

    会引发大量线程安全问题，JMM需要解决这些线程问题；不同时间区域的数据；

- JMM解决可见性问题：
    - 指令重排序需要满足的条件：
        ·在单线程环境下不能改变程序运行的结果
        ·存在数据依赖关系的不允许重排序
        无法通过happens-before原则推导出来的，才能进行指令的重排序

        即：A操作结果需要对B操作可见，则A和B存在happens-before关系

- volatile:JVM提供的轻量级同步机制
    > 保证被volatile修饰的共享变量对所有线程总是可见的
    > 禁止指令重排序优化

