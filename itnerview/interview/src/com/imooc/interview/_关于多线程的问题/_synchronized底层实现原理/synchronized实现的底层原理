加锁和释放锁的原理：
可重入原理：加锁次数计数器
保证可见性的原理:内存模型

- 实现synchronized的基础：
    · Java对象头，如图，而主要的两部分是：
        - Mark Word：默认存储对象的hashcode，分代年龄，锁类型，锁标志位等信息；
        - Class Metadata Address：类型指针指向对象的类元数据通过这个指针确定该对象是哪个类的数据
    · Monitor锁(所有Java对象自带) 也称管程，监视器锁，一种同步机制
        * 每次执行都会让锁计数+1或者-1；
        * 某线程尝试获取锁的情况：锁计数为0，立刻获取该锁
        * 已经拿到锁，重入，锁计数+1；
        * 锁已被获取，进入阻塞状态

可见性：涉及Java内存模型

          线程A                              线程B
           ↓                                 ↓
        本地内存A                          本地内存B
      共享变量的副本                     共享变量的副本

            ↑                                ↑
            ||              JMM控制           ||
            ↓                                ↓
      ------------------------------------------------
                            主内存

      共享变量1     共享变量2       共享变量3   共享变量4

* 线程间的通信是通过主内存来进行的
* 每个线程在执行代码块的时候，都要保证在锁释放之前，把数据实时更新到主内存里；


